tmp<fv::convectionScheme<scalar>> mvConvection
(
    fv::convectionScheme<scalar>::New
    (
        mesh,
        fields,
        phi,
        mesh.divScheme("div(phi,Yi_h)")
    )
);


PtrList<volVectorField> Dm =
dynamic_cast<const reactingMixture<gasHThermoPhysics>&>
(composition).Dm(p, T, Y, rho);

PtrList<volScalarField> hsi(Y.size());
PtrList<surfaceScalarField> J(Y.size());
PtrList<volScalarField> D(Y.size());
forAll(Y, i)
{
    hsi.set
	(
        i,        
        new volScalarField
        (
            IOobject
            (
        	    "hsi",
                mesh.time().timeName(),
        	    mesh
            ),
            mesh,
            dimensionedScalar
            (
                "hsi", 
        	    dimEnergy/dimMass, 
                Zero
            )
        )
	);
	
    D.set
	(
        i, 
        mag(Dm[i])/(dimensionedScalar("SMALL", dimensionSet(0,-1,0,0,0), Foam::SMALL)
		+mag(fvc::grad(Y[i]).ref()))		
	);

    J.set
	(
        i, 		
        linearInterpolate(Dm[i]*rho) & mesh.Sf()
	);	
}

forAll (Y, i)
{
	volScalarField& tHsi = hsi[i];	
	forAll(tHsi, celli)
	{
		tHsi[celli] = composition.Hs(i, p[celli], T[celli]);
	}
	volScalarField::Boundary& Bf = tHsi.boundaryFieldRef();	
	forAll(Bf, patchi)
	{
		forAll(Bf[patchi], facei)	
		{
			Bf[patchi][facei] = 
			composition.Hs
			(
			    i,
				p.boundaryField()[patchi][facei],
				T.boundaryField()[patchi][facei]
			);
		}
	}
}


//Info << "DT " << T << endl;
//Info << "bD " << bD << endl;
//Info << Dm[3].internalField() << endl;
{
    reaction->correct();
    Qdot = reaction->Qdot();
    volScalarField Yt(0.0*Y[0]);

    forAll(Y, i)
    {
        if (i != inertIndex && composition.active(i))
        {
            volScalarField& Yi = Y[i];

            fvScalarMatrix YiEqn
            (
                fvm::ddt(rho, Yi)
              + mvConvection->fvmDiv(phi, Yi)
			 // - fvm::div(J[i],Yi,"div(Ji,Yi)")
			 // - fvc::div(J[i])
			  - fvm::laplacian(rho*D[i], Yi)
             // - fvm::laplacian(turbulence->muEff(), Yi)
             ==
                reaction->R(Yi)
              + fvOptions(rho, Yi)
            );

            YiEqn.relax();

            fvOptions.constrain(YiEqn);

            YiEqn.solve(mesh.solver("Yi"));

            fvOptions.correct(Yi);

            Yi.max(0.0);
            Yt += Yi;
        }
    }

    Y[inertIndex] = scalar(1) - Yt;
    Y[inertIndex].max(0.0);
//	Info << rho*J[13] << endl;
//	Info << turbulence->muEff() << endl;
//	Info << Y[3].internalField() << endl;
//	Info << J[3].internalField() << endl;
}
